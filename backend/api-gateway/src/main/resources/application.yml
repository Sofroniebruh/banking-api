spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: http://auth-service:8081
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#ipKeyResolver"
        
        - id: auth-service-metrics
          uri: http://auth-service:8081
          predicates:
            - Path=/metrics/auth-service/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=X-Internal-Request, ${INTERNAL_SERVICE_SECRET}

server:
  port: 8080

logging:
  level:
    org.springframework.security: ${LOGGING_LEVEL}

resilience4j:
  circuitbreaker:
    instances:
      authService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    prometheus:
      access: unrestricted
    health:
      show-details: when-authorized
  health:
    defaults:
      enabled: true
  info:
    env:
      enabled: true
